// DAY 22/100
// 15-12-2021
/*
Longest Subarray Length
Asked in:  
DE Shaw
Problem Description

Given an integer array A of size N containing 0's and 1's only.

You need to find the length of the longest subarray having count of 1’s one more than count of 0’s.



Problem Constraints
1 <= N <= 105



Input Format
First and only argument is an integer array A of size N.



Output Format
Return an integer denoting the longest length of the subarray.



Example Input
Input 1:

 A = [0, 1, 1, 0, 0, 1]
Input 2:

 A = [1, 0, 0, 1, 0]


Example Output
Output 1:

 5
Output 2:

 1


Example Explanation
Explanation 1:

 Subarray of length 5, index 1 to 5 i.e 1, 1, 0, 0, 1. Count of 1 = 3, Count of 0 = 2.
Explanation 2:

 Subarray of length 1 will be only subarray that follow the above condition.


*/





int Solution::solve(vector<int> &A) {
    // how to check for more number of one: length - sum,
    // let no. of 0 and 1 = a and b
    // for b-a = 1
    // a+b == length or a + sum = length
    // a == sum
    // sum - a = 1 
    // CHECK FOR SUM == (1+length)/2
    
    if(A.size() == 0) {
        return 0;
    }
    
    map<int, int> X;
    int res = INT_MIN;
    int sum = 0;
    X[0] = -1;
    
    for(int i=0; i<A.size(); i++) {
        sum += A[i] == 0 ? -1 : 1;
        
        if(X.find(sum)==X.end()) {
            X[sum] = i;
        }
        
        if(X.find(sum-1)!=X.end()) {
            res = max(res, i-X[sum-1]);    
        }
        
        
    }
    
    return res;
}
