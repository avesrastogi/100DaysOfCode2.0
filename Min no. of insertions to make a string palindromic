// DAY 13/100
// MINIMUM NO. Of DELETIONS = MINIMUM NO. OF INSERTIONS to make a string palindromic
/*

Minimum Insertion Steps to Make a String Palindrome
Hard

Given a string s. In one step you can insert any character at any index of the string.

Return the minimum number of steps to make s palindrome.

A Palindrome String is one that reads the same backward as well as forward.

 

Example 1:

Input: s = "zzazz"
Output: 0
Explanation: The string "zzazz" is already palindrome we don't need any insertions.
Example 2:

Input: s = "mbadm"
Output: 2
Explanation: String can be "mbdadbm" or "mdbabdm".
Example 3:

Input: s = "leetcode"
Output: 5
Explanation: Inserting 5 characters the string becomes "leetcodocteel".
Example 4:

Input: s = "g"
Output: 0
Example 5:

Input: s = "no"
Output: 1
 

Constraints:

1 <= s.length <= 500
All characters of s are lower case English letters.

*/


class Solution {
public:
        int LCS(string & A, string & B) {

    int n=A.length();
    int m=B.length();
    int dp[n+1][m+1];
    memset(dp,0,sizeof(dp));
    
    for(int i=0;i<=n;i++)
    {
        for(int j=0;j<=m;j++)
        {
            if(i==0 || j==0)
            {
                dp[i][j]=0;
            }
            else if(A[i-1]==B[j-1])
            {
                dp[i][j]=dp[i-1][j-1]+1;
            }
            else
            {
                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
    }
    return dp[n][m];
    }
    
    int longestPalindromeSubseq(string & s) {
        string str = s;
        reverse(s.begin(), s.end());
        return LCS(str, s);
    }
    
    int minInsertions(string s) {
        return s.length() - longestPalindromeSubseq(s);
    }
};
