// DAY 9/10
/*

Maximum Number of Balls in a Box


You are working in a ball factory where you have n balls numbered from lowLimit up to highLimit inclusive (i.e., n == highLimit - lowLimit + 1), and an infinite number of boxes numbered from 1 to infinity.

Your job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. For example, the ball number 321 will be put in the box number 3 + 2 + 1 = 6 and the ball number 10 will be put in the box number 1 + 0 = 1.

Given two integers lowLimit and highLimit, return the number of balls in the box with the most balls.

*/


class Solution {
public:
    int countBalls(int lowLimit, int highLimit) {
        int Count[46] = {0};
        for(int i=lowLimit; i<=highLimit; i++) {
            int num = i;
            int sumOfDigits = 0;
            while(num) {
                sumOfDigits+=num%10;
                num /= 10;
            }
            Count[sumOfDigits]++;
        }
        

        return *max_element(Count, Count+46);
    }
};




// WORST CASE
/*

class Solution {
public:
    int countBalls(int lowLimit, int highLimit) {
        map<int, int> Count;
        for(int i=lowLimit; i<=highLimit; i++) {
            int num = i;
            int sumOfDigits = 0;
            while(num) {
                sumOfDigits+=num%10;
                num /= 10;
            }
            Count[sumOfDigits]++;
        }
        
        int maxVal = 0;
        for(auto i = Count.cbegin(); i != Count.cend(); ++i) {
            if(i->second > maxVal) {
                maxVal = i->second;
            }
        }
        
        return maxVal;
    }
};

*/
