// DAY 15, 16, 17, 18
// brushed up react basics from YT tutorial,
// fixed an app and hosted it
// deployed spotify clone app
/*
3 Sum Zero
Asked in:  
Facebook
Google
Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0?
Find all unique triplets in the array which gives the sum of zero.

Note:

 Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)
The solution set must not contain duplicate triplets. For example, given array S = {-1 0 1 2 -1 -4}, A solution set is:
(-1, 0, 1)
(-1, -1, 2) 

*/



vector<vector<int> > Solution::threeSum(vector<int> &A) {
    vector<vector<int>> res;
    
    sort(A.begin(), A.end());
    
    int n = A.size();
    
    for(int i=0; i<n-1; i++) {
        int l = i+1;
        int r = n-1;
        while(l<r) {

            int x = A[i];
            // cout<<x<<"zz";
            if((long)x + (long)A[l] + (long)A[r] == 0) {
                vector<int> temp;
                temp.push_back(x);
                temp.push_back(A[l]);
                temp.push_back(A[r]);
                res.push_back(temp);
                l++;
                r--;
            }
            else if((long)x + (long)A[l] + (long)A[r] < 0) {
                l++;
            }
            else {
                r--;
            }
        }
    }
    
    sort(res.begin(), res.end());
    res.erase(unique(res.begin(), res.end()), res.end());
    return res;
}

// lesser time by eliminating erase and unique stl
/*


class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& A) {
    vector<vector<int>> res;
    
    sort(A.begin(), A.end());
    
    int n = A.size();
    
    for(int i=0; i<n-2; i++) {
        if(i>0 && A[i]==A[i-1]) continue;
        int l = i+1;
        int r = n-1;
        while(l<r) {

            int x = A[i];
            // cout<<x<<"zz";
            
            if((long)x + (long)A[l] + (long)A[r] < 0) {
                l++;
            }
            else if((long)x + (long)A[l] + (long)A[r] > 0){
                r--;
            }
            else {
                res.push_back(vector<int> {x, A[l], A[r]});
                while(l+1<r && A[l]==A[l+1]) l++;
                while(l<r-1 && A[r]==A[r-1]) r--;
                l++;
                r--;
            }
        }
    }
    

    return res;
    }
};




*/
